*This page is dynamically generated by
the*\ `scripts/gen_op_tables.aya <https://github.com/aya-lang/aya/blob/master/examples/gen_op_tables.aya>`__\ *script.*

Type Abbreviations
------------------

.. raw:: html

   <table style border="0">

.. raw:: html

   <tr>

.. raw:: html

   <td>

Number

.. raw:: html

   </td>

.. raw:: html

   <td>

N

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

String

.. raw:: html

   </td>

.. raw:: html

   <td>

S

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

Char

.. raw:: html

   </td>

.. raw:: html

   <td>

C

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

Block

.. raw:: html

   </td>

.. raw:: html

   <td>

B

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

Dict

.. raw:: html

   </td>

.. raw:: html

   <td>

D

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

Symbol

.. raw:: html

   </td>

.. raw:: html

   <td>

J

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   </table>

Operators
---------

.. raw:: html

   <table style="" border="0">

.. raw:: html

   <tr>

.. raw:: html

   <td>

!

.. raw:: html

   </td>

.. raw:: html

   <td>

N|C

.. raw:: html

   </td>

.. raw:: html

   <td>

N: 1-N (logical not, complementary probability)C: swap case

.. raw:: html

   </td>

.. raw:: html

   <td>

**new**

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

#

.. raw:: html

   </td>

.. raw:: html

   <td>

LA..#A

.. raw:: html

   </td>

.. raw:: html

   <td>

LA..#A: map

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

:math:`</td><td>A</td><td>A: deepcopy (duplicate)</td><td></td></tr><tr><td>%</td><td>NN|BN</td><td>NN: mod<br />BN: repeat B N times</td><td>__mod__/__rmod__</td></tr><tr><td>&</td><td>NN|SS</td><td>NN: bitwise and<br />SS: list all expressions matching the regex</td><td>__and__/__rand__</td></tr><tr><td>*</td><td>NN|LS|LC</td><td>NN: multiply<br />LS: join<br />LC: join</td><td>__mul__/__rmul__</td></tr><tr><td>+</td><td>NN|CC|SA|AS</td><td>NN: add<br />CC: add<br />SA: append string<br />AS: append string</td><td>__add__/__radd__</td></tr><tr><td>-</td><td>NN|CC</td><td>NN: subtract<br />CC: subtract</td><td>__sub__/__rsub__</td></tr><tr><td>/</td><td>LB|NN</td><td>LB: fold<br />NN: divide</td><td>__div__/__rdiv__</td></tr><tr><td>;</td><td>A</td><td>A: pop and discard</td><td></td></tr><tr><td><</td><td>NN|SS|CC</td><td>NN: less than<br />SS: less than<br />CC: less than</td><td>__lt__/__rlt__</td></tr><tr><td>=</td><td>AA</td><td>AA: equality</td><td>__eq__</td></tr><tr><td>></td><td>NN|SS|CC</td><td>NN: greater than<br />SS: greater than<br />CC: greater than</td><td>__gt__/__rgt__</td></tr><tr><td>?</td><td>AA</td><td>AA: if A1, then A2. If A2 is block, execute it</td><td></td></tr><tr><td>@</td><td>AAA</td><td>AAA: rotates the top three elements on the stack [abc->bca]</td><td></td></tr><tr><td>A</td><td>A</td><td>A: wrap in list</td><td></td></tr><tr><td>B</td><td>J|L|N|C</td><td>J: increment in place<br />L: uncons from front<br />N: increment<br />C: increment</td><td>__inc__</td></tr><tr><td>C</td><td>L|S|N</td><td>L: sort least to greatest<br />S: sort least to greatest<br />N: bitwise not</td><td>__sort__</td></tr><tr><td>D</td><td>ALN</td><td>ALN: set index</td><td>__setindex__</td></tr><tr><td>E</td><td>L|N|S</td><td>L: length<br />N: 10^N<br />S: length</td><td>__len__</td></tr><tr><td>F</td><td>NN</td><td>NN: unsigned right bitshift</td><td></td></tr><tr><td>G</td><td>S|N</td><td>S: read a string from a filename or URL<br />N: isprime</td><td></td></tr><tr><td>H</td><td>SNN|LNN|NNN</td><td>SNN: convert base of N|S|L from N1 to N2<br />LNN: convert base of N|S|L from N1 to N2<br />NNN: convert base of N|S|L from N1 to N2</td><td></td></tr><tr><td>I</td><td>LB|LL|LN</td><td>LB: filter<br />LL: get index<br />LN: get index</td><td>__getindex__</td></tr><tr><td>J</td><td>AA|LL|LA|AL</td><td>AA: create list [ A A ]<br />LL: join lists<br />LA: add to list<br />AL: add to list</td><td></td></tr><tr><td>K</td><td>AA|LL|LA|AL</td><td>AA: create list [ A A ]<br />LL: concatenate lists (modify list 1)<br />LA: add to list (modify list)<br />AL: add to list (modify list)</td><td></td></tr><tr><td>L</td><td>LL|AN|NL</td><td>LL: reshape<br />AN: create list by repeating A N times<br />NL: reshape</td><td></td></tr><tr><td>N</td><td>DJ|DS|SS|LA</td><td>DJ: contains key; keep dict on stack<br />DS: contains key; keep dict on stack<br />SS: return index of first occurance, -1 if not found; keep list on stack<br />LA: return index of first occurance, -1 if not found; keep list on stack</td><td></td></tr><tr><td>O</td><td>LB|DB</td><td>LB: Map block to list<br />DB: Map block to dict</td><td>__each__</td></tr><tr><td>P</td><td>A</td><td>A: to string</td><td>__str__</td></tr><tr><td>Q</td><td>L|N</td><td>L: random choice<br />N: N>0: random number 0-N, N<0: random number N-0, N=0: any int</td><td>__random__</td></tr><tr><td>R</td><td>L|N|C</td><td>L: len L = 2: range [N1, N1+1, ..., N2], len l = 3: range [N1, N2, ..., N3]<br />N: range [1, 2 .. N]<br />C: range [1, 2 .. N]</td><td>__range__</td></tr><tr><td>S</td><td>B|J|L</td><td>B: duplicate block, add locals if they do not exist<br />J: is defined<br />L: sum (fold using +)</td><td></td></tr><tr><td>T</td><td>N</td><td>N: negate</td><td>__negate__</td></tr><tr><td>U</td><td>L</td><td>L: reverse</td><td>__reverse__</td></tr><tr><td>V</td><td>J|L|N|C</td><td>J: decrement in place<br />L: uncons from back<br />N: decrement<br />C: decrement</td><td>__dec__</td></tr><tr><td>W</td><td>B|D</td><td>B: while loop (repeat as long as block returns true)<br />D: export all variables</td><td></td></tr><tr><td>X</td><td>A</td><td>A: assign to variable x and pop from stack</td><td></td></tr><tr><td>Y</td><td>A</td><td>A: assign to variable y and leave on stack</td><td></td></tr><tr><td>Z</td><td>N|S</td><td>N: cast to bignum<br />S: parse to bignum</td><td></td></tr><tr><td>\</td><td>AA</td><td>AA: swap top two elements on the stack</td><td></td></tr><tr><td>^</td><td>NN|SS</td><td>NN: power<br />SS: levenshtein distance</td><td>__pow__/__rpow__</td></tr><tr><td>.!</td><td>B|N|S</td><td>B: copy block without header<br />N: signum<br />S: parse if number</td><td>__signum__</td></tr><tr><td>."</td><td>L|N|S</td><td>L: convert number list to string using UTF-8 encoding<br />N: cast to char<br />S: cast to char</td><td></td></tr><tr><td>.`

.. raw:: html

   </td>

.. raw:: html

   <td>

..AN

.. raw:: html

   </td>

.. raw:: html

   <td>

..AN: copies the Nth item on the stack to the top (not including N)

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.%

.. raw:: html

   </td>

.. raw:: html

   <td>

NN

.. raw:: html

   </td>

.. raw:: html

   <td>

NN: integer division

.. raw:: html

   </td>

.. raw:: html

   <td>

**idiv**/**ridiv**

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.&

.. raw:: html

   </td>

.. raw:: html

   <td>

SSS|LLB

.. raw:: html

   </td>

.. raw:: html

   <td>

SSS: replace all occurances of the regex S1 with S2 in S3LLB: zip with

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.(

.. raw:: html

   </td>

.. raw:: html

   <td>

NN

.. raw:: html

   </td>

.. raw:: html

   <td>

NN: left bitwise shift

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.)

.. raw:: html

   </td>

.. raw:: html

   <td>

NN

.. raw:: html

   </td>

.. raw:: html

   <td>

NN: signed right bitwise shift

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.\*

.. raw:: html

   </td>

.. raw:: html

   <td>

B|L

.. raw:: html

   </td>

.. raw:: html

   <td>

B: decompileL: compile

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.+

.. raw:: html

   </td>

.. raw:: html

   <td>

NN|BD|BJ|BL\|DD

.. raw:: html

   </td>

.. raw:: html

   <td>

NN: gdcBD: swap vars in a copy of B for values defined in DBJ: constant
capture variable from outer scopeBL: constant capture variables from
outer scopeDD: update D1 with the values from D2 (modify D1)

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.-

.. raw:: html

   </td>

.. raw:: html

   <td>

DJ|DS|NN|LL|LN

.. raw:: html

   </td>

.. raw:: html

   <td>

DJ: remove key from dictDS: remove key from dictNN: lcmLL: remove items
at indices L1 from L2LN: remove item at index N from L

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

./

.. raw:: html

   </td>

.. raw:: html

   <td>

N

.. raw:: html

   </td>

.. raw:: html

   <td>

N: ceiling

.. raw:: html

   </td>

.. raw:: html

   <td>

**ceil**

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.;

.. raw:: html

   </td>

.. raw:: html

   <td>

..A

.. raw:: html

   </td>

.. raw:: html

   <td>

..A: clear the entire stack

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.<

.. raw:: html

   </td>

.. raw:: html

   <td>

SN|NN|SS|LN|CC

.. raw:: html

   </td>

.. raw:: html

   <td>

SN: head / pad ’ ’NN: greater ofSS: greater ofLN: head / pad 0CC:
greater of

.. raw:: html

   </td>

.. raw:: html

   <td>

**head**

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.=

.. raw:: html

   </td>

.. raw:: html

   <td>

LL|LA|AL

.. raw:: html

   </td>

.. raw:: html

   <td>

LL: element-wise equivalenceLA: element-wise equivalenceAL: element-wise
equivalence

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.>

.. raw:: html

   </td>

.. raw:: html

   <td>

SN|NN|SS|LN|CC

.. raw:: html

   </td>

.. raw:: html

   <td>

SN: tail / pad ’ ’NN: lesser ofSS: lesser ofLN: tail / pad 0CC: lesser
of

.. raw:: html

   </td>

.. raw:: html

   <td>

**tail**

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.?

.. raw:: html

   </td>

.. raw:: html

   <td>

AAA

.. raw:: html

   </td>

.. raw:: html

   <td>

AAA: if A1 then A2, else A3. If A2/A3 are blocks, execute

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.@

.. raw:: html

   </td>

.. raw:: html

   <td>

..AN

.. raw:: html

   </td>

.. raw:: html

   <td>

..AN: moves the Nth item on the stack (not including N) to the top

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.A

.. raw:: html

   </td>

.. raw:: html

   <td>

..A

.. raw:: html

   </td>

.. raw:: html

   <td>

..A: wrap entire stack in a list

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.B

.. raw:: html

   </td>

.. raw:: html

   <td>

AL

.. raw:: html

   </td>

.. raw:: html

   <td>

AL: append item to the back of a list

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.C

.. raw:: html

   </td>

.. raw:: html

   <td>

LB|NN

.. raw:: html

   </td>

.. raw:: html

   <td>

LB: sort least to greatest by applying B to LNN: xor

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.D

.. raw:: html

   </td>

.. raw:: html

   <td>

A

.. raw:: html

   </td>

.. raw:: html

   <td>

A: throw an exception containing A

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.E

.. raw:: html

   </td>

.. raw:: html

   <td>

L

.. raw:: html

   </td>

.. raw:: html

   <td>

L: length, keep list on stack

.. raw:: html

   </td>

.. raw:: html

   <td>

**len**

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.F

.. raw:: html

   </td>

.. raw:: html

   <td>

L

.. raw:: html

   </td>

.. raw:: html

   <td>

L: flatten nested list

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.G

.. raw:: html

   </td>

.. raw:: html

   <td>

ASN

.. raw:: html

   </td>

.. raw:: html

   <td>

ASN: write A as a string to file located at S. N = 0, overwrite. N = 1,
append

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.I

.. raw:: html

   </td>

.. raw:: html

   <td>

LNA|DSA|DJA

.. raw:: html

   </td>

.. raw:: html

   <td>

LNA: getindex with default valueDSA: getindex with default valueDJA:
getindex with default value

.. raw:: html

   </td>

.. raw:: html

   <td>

**getindex**

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.K

.. raw:: html

   </td>

.. raw:: html

   <td>

BB

.. raw:: html

   </td>

.. raw:: html

   <td>

BB: try B1, if error, execute B2. Neither block has access to the global
stack

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.M

.. raw:: html

   </td>

.. raw:: html

   <td>

A

.. raw:: html

   </td>

.. raw:: html

   <td>

A: get metatable

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.N

.. raw:: html

   </td>

.. raw:: html

   <td>

LB

.. raw:: html

   </td>

.. raw:: html

   <td>

LB: return the index of the first element of L that satifies E; keep
list on stack

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.P

.. raw:: html

   </td>

.. raw:: html

   <td>

A

.. raw:: html

   </td>

.. raw:: html

   <td>

A: print to stdout

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.Q

.. raw:: html

   </td>

.. raw:: html

   <td>

-

.. raw:: html

   </td>

.. raw:: html

   <td>

-: return a random decimal from 0 to 1

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.R

.. raw:: html

   </td>

.. raw:: html

   <td>

N

.. raw:: html

   </td>

.. raw:: html

   <td>

N: range [0, 1, .., N-1]

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.T

.. raw:: html

   </td>

.. raw:: html

   <td>

L

.. raw:: html

   </td>

.. raw:: html

   <td>

L: transpose a 2d list

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.U

.. raw:: html

   </td>

.. raw:: html

   <td>

S

.. raw:: html

   </td>

.. raw:: html

   <td>

S: requests a string using a ui dialog, S is the prompt text

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.V

.. raw:: html

   </td>

.. raw:: html

   <td>

AL

.. raw:: html

   </td>

.. raw:: html

   <td>

AL: append item to back of list

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.</td>

.. raw:: html

   <td>

N

.. raw:: html

   </td>

.. raw:: html

   <td>

N: floor

.. raw:: html

   </td>

.. raw:: html

   <td>

**floor**

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.^

.. raw:: html

   </td>

.. raw:: html

   <td>

N

.. raw:: html

   </td>

.. raw:: html

   <td>

N: square root

.. raw:: html

   </td>

.. raw:: html

   <td>

**sqrt**

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.\|

.. raw:: html

   </td>

.. raw:: html

   <td>

B|N

.. raw:: html

   </td>

.. raw:: html

   <td>

B: get meta information for a blockN: absolute value

.. raw:: html

   </td>

.. raw:: html

   <td>

**abs**

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.~

.. raw:: html

   </td>

.. raw:: html

   <td>

B|J|S|C|D

.. raw:: html

   </td>

.. raw:: html

   <td>

B: get contents of blockJ: deref variable; if not a block, put contents
in blockS: parse contents to a blockC: parse contents to a blockD: set
all variables

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

:!

.. raw:: html

   </td>

.. raw:: html

   <td>

AA

.. raw:: html

   </td>

.. raw:: html

   <td>

AA: assert equal

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

:"

.. raw:: html

   </td>

.. raw:: html

   <td>

S|N|C

.. raw:: html

   </td>

.. raw:: html

   <td>

S: convert a string to bytes using UTF-8 encodingN: identity; return NC:
ord (cast to int)

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

:#

.. raw:: html

   </td>

.. raw:: html

   <td>

L:#B|D:#B

.. raw:: html

   </td>

.. raw:: html

   <td>

L:#B: mapD:#B: map over key value pairs

.. raw:: html

   </td>

.. raw:: html

   <td>

**each**

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

:$

.. raw:: html

   </td>

.. raw:: html

   <td>

..AN

.. raw:: html

   </td>

.. raw:: html

   <td>

..AN: copies the first N items on the stack (not including N)

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

:%

.. raw:: html

   </td>

.. raw:: html

   <td>

S

.. raw:: html

   </td>

.. raw:: html

   <td>

S: interpolate string

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

:&

.. raw:: html

   </td>

.. raw:: html

   <td>

A

.. raw:: html

   </td>

.. raw:: html

   <td>

A: duplicate reference (same as $ but does not make a copy)

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

:\*

.. raw:: html

   </td>

.. raw:: html

   <td>

LLB

.. raw:: html

   </td>

.. raw:: html

   <td>

LLB: outer product of two lists using B

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

:;

.. raw:: html

   </td>

.. raw:: html

   <td>

..AA

.. raw:: html

   </td>

.. raw:: html

   <td>

..AA: clear all but the top of the stack

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

:<

.. raw:: html

   </td>

.. raw:: html

   <td>

NN|SS|CC

.. raw:: html

   </td>

.. raw:: html

   <td>

NN: less then or equal toSS: less then or equal toCC: less then or equal
to

.. raw:: html

   </td>

.. raw:: html

   <td>

**leq**/**rleq**

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

:=

.. raw:: html

   </td>

.. raw:: html

   <td>

AJ|AC|AS

.. raw:: html

   </td>

.. raw:: html

   <td>

AJ: assign A to variableAC: assign A to variableAS: assign A to variable

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

:>

.. raw:: html

   </td>

.. raw:: html

   <td>

NN|SS|CC

.. raw:: html

   </td>

.. raw:: html

   <td>

NN: greater than or equal toSS: greater than or equal toCC: greater than
or equal to

.. raw:: html

   </td>

.. raw:: html

   <td>

**geq**/**rgeq**

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

:?

.. raw:: html

   </td>

.. raw:: html

   <td>

A

.. raw:: html

   </td>

.. raw:: html

   <td>

A: convert to boolean

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

:A

.. raw:: html

   </td>

.. raw:: html

   <td>

..AN

.. raw:: html

   </td>

.. raw:: html

   <td>

..AN: collect N items from stack into list

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

:C

.. raw:: html

   </td>

.. raw:: html

   <td>

J|S

.. raw:: html

   </td>

.. raw:: html

   <td>

J: convert symbol to string nameS: return S

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

:D

.. raw:: html

   </td>

.. raw:: html

   <td>

ASD|AJD

.. raw:: html

   </td>

.. raw:: html

   <td>

ASD: set dict indexAJD: set dict index

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

:E

.. raw:: html

   </td>

.. raw:: html

   <td>

D

.. raw:: html

   </td>

.. raw:: html

   <td>

D: number or items in a dict

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

:G

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   <td>

: Return the variable scope stack as a list of dicts

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

:I

.. raw:: html

   </td>

.. raw:: html

   <td>

DJ|DS

.. raw:: html

   </td>

.. raw:: html

   <td>

DJ: get dict item from keyDS: get dict item from key

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

:K

.. raw:: html

   </td>

.. raw:: html

   <td>

D

.. raw:: html

   </td>

.. raw:: html

   <td>

D: return a list of keys as symbols

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

:M

.. raw:: html

   </td>

.. raw:: html

   <td>

BD|DD

.. raw:: html

   </td>

.. raw:: html

   <td>

BD: duplicate block with the given metadataDD: set D1’s meta to D2 leave
D1 on stack

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

:O

.. raw:: html

   </td>

.. raw:: html

   <td>

J

.. raw:: html

   </td>

.. raw:: html

   <td>

J: Aya meta information

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

:P

.. raw:: html

   </td>

.. raw:: html

   <td>

A

.. raw:: html

   </td>

.. raw:: html

   <td>

A: println to stdout

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

:R

.. raw:: html

   </td>

.. raw:: html

   <td>

-

.. raw:: html

   </td>

.. raw:: html

   <td>

-: readline from stdin

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

:S

.. raw:: html

   </td>

.. raw:: html

   <td>

B|S|C

.. raw:: html

   </td>

.. raw:: html

   <td>

B: if block has single var or op convert to symbol list, else return
empty listS: convert to symbolC: convert to symbol

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

:T

.. raw:: html

   </td>

.. raw:: html

   <td>

A

.. raw:: html

   </td>

.. raw:: html

   <td>

A: type of (returns a symbol)

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

:V

.. raw:: html

   </td>

.. raw:: html

   <td>

D

.. raw:: html

   </td>

.. raw:: html

   <td>

D: return a list of values

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

:Z

.. raw:: html

   </td>

.. raw:: html

   <td>

N

.. raw:: html

   </td>

.. raw:: html

   <td>

N: sleep (milliseconds)

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

:``</td><td>BN:``\ A

.. raw:: html

   </td>

.. raw:: html

   <td>

BN:`A: wrap next N instructions in a block

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

:\|

.. raw:: html

   </td>

.. raw:: html

   <td>

LL

.. raw:: html

   </td>

.. raw:: html

   <td>

LL: remove all elements in L2 from L1

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

:}

.. raw:: html

   </td>

.. raw:: html

   <td>

A

.. raw:: html

   </td>

.. raw:: html

   <td>

A: wrap in block

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

:~

.. raw:: html

   </td>

.. raw:: html

   <td>

L

.. raw:: html

   </td>

.. raw:: html

   <td>

L: remove duplicates

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

M!

.. raw:: html

   </td>

.. raw:: html

   <td>

N

.. raw:: html

   </td>

.. raw:: html

   <td>

N: factorial

.. raw:: html

   </td>

.. raw:: html

   <td>

**fact**

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

M#

.. raw:: html

   </td>

.. raw:: html

   <td>

A

.. raw:: html

   </td>

.. raw:: html

   <td>

A: hash code of the object

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

M$

.. raw:: html

   </td>

.. raw:: html

   <td>

-

.. raw:: html

   </td>

.. raw:: html

   <td>

-: system time in milliseconds

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

M?

.. raw:: html

   </td>

.. raw:: html

   <td>

B|N|S

.. raw:: html

   </td>

.. raw:: html

   <td>

B: get help data for operatorN: list op descriptions where N=[0:std,
1:dot, 2:colon, 3:misc]S: search all help data

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

MC

.. raw:: html

   </td>

.. raw:: html

   <td>

N

.. raw:: html

   </td>

.. raw:: html

   <td>

N: inverse cosine

.. raw:: html

   </td>

.. raw:: html

   <td>

**acos**

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

MI

.. raw:: html

   </td>

.. raw:: html

   <td>

NN

.. raw:: html

   </td>

.. raw:: html

   <td>

NN: create complex number

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

ML

.. raw:: html

   </td>

.. raw:: html

   <td>

N

.. raw:: html

   </td>

.. raw:: html

   <td>

N: base-10 logarithm

.. raw:: html

   </td>

.. raw:: html

   <td>

**log**

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

MS

.. raw:: html

   </td>

.. raw:: html

   <td>

N

.. raw:: html

   </td>

.. raw:: html

   <td>

N: inverse sine

.. raw:: html

   </td>

.. raw:: html

   <td>

**asin**

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

MT

.. raw:: html

   </td>

.. raw:: html

   <td>

N

.. raw:: html

   </td>

.. raw:: html

   <td>

N: inverse tangent

.. raw:: html

   </td>

.. raw:: html

   <td>

**atan**

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

Mc

.. raw:: html

   </td>

.. raw:: html

   <td>

N

.. raw:: html

   </td>

.. raw:: html

   <td>

N: cosine

.. raw:: html

   </td>

.. raw:: html

   <td>

**cos**

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

Md

.. raw:: html

   </td>

.. raw:: html

   <td>

N|S

.. raw:: html

   </td>

.. raw:: html

   <td>

N: cast to doubleS: parse double, if invalid, return 0.0

.. raw:: html

   </td>

.. raw:: html

   <td>

**float**

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

Me

.. raw:: html

   </td>

.. raw:: html

   <td>

N

.. raw:: html

   </td>

.. raw:: html

   <td>

N: exponential function

.. raw:: html

   </td>

.. raw:: html

   <td>

**exp**

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

Mi

.. raw:: html

   </td>

.. raw:: html

   <td>

N

.. raw:: html

   </td>

.. raw:: html

   <td>

N: imag part of complex number

.. raw:: html

   </td>

.. raw:: html

   <td>

**imag**

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

Mk

.. raw:: html

   </td>

.. raw:: html

   <td>

CS

.. raw:: html

   </td>

.. raw:: html

   <td>

CS: add special character

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

Ml

.. raw:: html

   </td>

.. raw:: html

   <td>

N

.. raw:: html

   </td>

.. raw:: html

   <td>

N: natural logarithm

.. raw:: html

   </td>

.. raw:: html

   <td>

**ln**

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

Mm

.. raw:: html

   </td>

.. raw:: html

   <td>

D

.. raw:: html

   </td>

.. raw:: html

   <td>

D: true if the dict has a metatable, leave D on stack

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

Mp

.. raw:: html

   </td>

.. raw:: html

   <td>

N

.. raw:: html

   </td>

.. raw:: html

   <td>

N: list primes up to N

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

Mr

.. raw:: html

   </td>

.. raw:: html

   <td>

N

.. raw:: html

   </td>

.. raw:: html

   <td>

N: convert to fractional number

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

Ms

.. raw:: html

   </td>

.. raw:: html

   <td>

N

.. raw:: html

   </td>

.. raw:: html

   <td>

N: sine

.. raw:: html

   </td>

.. raw:: html

   <td>

**sin**

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

Mt

.. raw:: html

   </td>

.. raw:: html

   <td>

N

.. raw:: html

   </td>

.. raw:: html

   <td>

N: tangent

.. raw:: html

   </td>

.. raw:: html

   <td>

**tan**

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

Mu

.. raw:: html

   </td>

.. raw:: html

   <td>

NN

.. raw:: html

   </td>

.. raw:: html

   <td>

NN: y x Mu => atan2(y,x)

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   </table>
