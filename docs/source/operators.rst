This page is dynamically generated by the scripts/gen_op_tables.aya
script.

.. raw:: html

   <h2>

Type Abbreviations

.. raw:: html

   </h2>

.. raw:: html

   <table style border="0">

.. raw:: html

   <tr>

.. raw:: html

   <td>

Number

.. raw:: html

   </td>

.. raw:: html

   <td>

N

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

String

.. raw:: html

   </td>

.. raw:: html

   <td>

S

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

Char

.. raw:: html

   </td>

.. raw:: html

   <td>

C

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

Block

.. raw:: html

   </td>

.. raw:: html

   <td>

B

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

Dict

.. raw:: html

   </td>

.. raw:: html

   <td>

D

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

Symbol

.. raw:: html

   </td>

.. raw:: html

   <td>

J

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   </table>

.. raw:: html

   <h2>

Operators

.. raw:: html

   </h2>

.. raw:: html

   <table style border="0">

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>!</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>N|C</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

N : 1-N (logical not, complementary probability)C : swap case

.. raw:: html

   </td>

.. raw:: html

   <td>

\ **new**\ 

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>#</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>LA..#A</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

LA..#A : map

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>$</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>A</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

A : deepcopy (duplicate)

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>%</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>NN|BN</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

NN : modBN : repeat B N times

.. raw:: html

   </td>

.. raw:: html

   <td>

\ **mod**\  / \ **rmod**\ 

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>&</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>SS|NN</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

SS : list all expressions matching the regexNN : bitwise and

.. raw:: html

   </td>

.. raw:: html

   <td>

\ **and**\  / \ **rand**\ 

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>*</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>LS|LC|NN</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

LS : joinLC : joinNN : multiply

.. raw:: html

   </td>

.. raw:: html

   <td>

\ **mul**\  / \ **rmul**\ 

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>+</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>CC|SA|AS|NN</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

CC : addSA : append stringAS : append stringNN : add

.. raw:: html

   </td>

.. raw:: html

   <td>

\ **add**\  / \ **radd**\ 

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>-</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>CC|NN</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

CC : subtractNN : subtract

.. raw:: html

   </td>

.. raw:: html

   <td>

\ **sub**\  / \ **rsub**\ 

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>/</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>LB|NN</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

LB : foldNN : divide

.. raw:: html

   </td>

.. raw:: html

   <td>

\ **div**\  / \ **rdiv**\ 

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>;</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>A</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

A : pop and discard

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre><</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>SS|CC|NN</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

SS : less thanCC : less thanNN : less than

.. raw:: html

   </td>

.. raw:: html

   <td>

\ **lt**\  / \ **rlt**\ 

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>=</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>AA</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

AA : equality

.. raw:: html

   </td>

.. raw:: html

   <td>

\ **eq**\ 

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>></pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>SS|CC|NN</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

SS : greater thanCC : greater thanNN : greater than

.. raw:: html

   </td>

.. raw:: html

   <td>

\ **gt**\  / \ **rgt**\ 

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>?</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>AA</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

AA : if A1, then A2. If A2 is block, execute it

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>@</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>AAA</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

AAA : rotates the top three elements on the stack [abc->bca]

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>A</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>A</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

A : wrap in list

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>B</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>J|L|N|C</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

J : increment in placeL : uncons from frontN : incrementC : increment

.. raw:: html

   </td>

.. raw:: html

   <td>

\ **inc**\ 

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>C</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>L|S|N</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

L : sort least to greatestS : sort least to greatestN : bitwise not

.. raw:: html

   </td>

.. raw:: html

   <td>

\ **sort**\ 

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>D</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>ALN</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

ALN : set index

.. raw:: html

   </td>

.. raw:: html

   <td>

\ **setindex**\ 

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>E</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>L|N|S</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

L : lengthN : 10^NS : length

.. raw:: html

   </td>

.. raw:: html

   <td>

\ **len**\ 

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>F</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>NN</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

NN : unsigned right bitshift

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>G</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>S|N</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

S : read a string from a filename or URLN : isprime

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>H</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>NNN|SNN|LNN</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

NNN : convert base of N|S|L from N1 to N2SNN : convert base of N|S|L
from N1 to N2LNN : convert base of N|S|L from N1 to N2

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>I</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>LL|LN|LB</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

LL : get indexLN : get indexLB : filter

.. raw:: html

   </td>

.. raw:: html

   <td>

\ **getindex**\ 

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>J</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>LL|LA|AL|AA</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

LL : join listsLA : add to listAL : add to listAA : create list [ A A ]

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>K</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>LL|LA|AL|AA</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

LL : concatenate lists (modify list 1)LA : add to list (modify list)AL :
add to list (modify list)AA : create list [ A A ]

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>L</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>LL|AN|NL</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

LL : reshapeAN : create list by repeating A N timesNL : reshape

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>N</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>SS|LA|DJ|DS</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

SS : return index of first occurance, -1 if not found; keep list on
stackLA : return index of first occurance, -1 if not found; keep list on
stackDJ : contains key; keep dict on stackDS : contains key; keep dict
on stack

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>O</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>LB|DB</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

LB : Map block to listDB : Map block to dict

.. raw:: html

   </td>

.. raw:: html

   <td>

\ **each**\ 

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>P</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>A</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

A : to string

.. raw:: html

   </td>

.. raw:: html

   <td>

\ **str**\ 

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>Q</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>L|N</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

L : random choiceN : N>0: random number 0-N, N<0: random number N-0,
N=0: any int

.. raw:: html

   </td>

.. raw:: html

   <td>

\ **random**\ 

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>R</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>L|N|C</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

L : len L = 2: range [N1, N1+1, …, N2], len l = 3: range [N1, N2, …,
N3]N : range [1, 2 .. N]C : range [1, 2 .. N]

.. raw:: html

   </td>

.. raw:: html

   <td>

\ **range**\ 

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>S</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>B|J|L</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

B : duplicate block, add locals if they do not existJ : is definedL :
sum (fold using +)

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>T</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>N</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

N : negate

.. raw:: html

   </td>

.. raw:: html

   <td>

\ **negate**\ 

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>U</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>L</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

L : reverse

.. raw:: html

   </td>

.. raw:: html

   <td>

\ **reverse**\ 

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>V</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>J|L|N|C</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

J : decrement in placeL : uncons from backN : decrementC : decrement

.. raw:: html

   </td>

.. raw:: html

   <td>

\ **dec**\ 

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>W</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>B|D</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

B : while loop (repeat as long as block returns true)D : export all
variables

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>X</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>A</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

A : assign to variable x and pop from stack

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>Y</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>A</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

A : assign to variable y and leave on stack

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>Z</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>N|S</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

N : cast to bignumS : parse to bignum

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>\</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>AA</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

AA : swap top two elements on the stack

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>^</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>SS|NN</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

SS : levenshtein distanceNN : power

.. raw:: html

   </td>

.. raw:: html

   <td>

\ **pow**\  / \ **rpow**\ 

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>.!</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>B|N|S</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

B : copy block without headerN : signumS : parse if number

.. raw:: html

   </td>

.. raw:: html

   <td>

\ **signum**\ 

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>.$</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>..AN</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

..AN : copies the Nth item on the stack to the top (not including N)

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>.%</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>NN</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

NN : integer division

.. raw:: html

   </td>

.. raw:: html

   <td>

\ **idiv**\  / \ **ridiv**\ 

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>.&</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>SSS|LLB</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

SSS : replace all occurances of the regex S1 with S2 in S3LLB : zip with

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>.'</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>L|N|S</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

L : convert number list to string using UTF-8 encodingN : cast to charS
: cast to char

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>.(</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>NN</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

NN : left bitwise shift

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>.)</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>NN</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

NN : signed right bitwise shift

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>.*</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>B|L</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

B : decompileL : compile

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>.+</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>BD|BJ|BL<J>|DD|NN</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

BD : swap vars in a copy of B for values defined in DBJ : constant
capture variable from outer scopeBL : constant capture variables from
outer scopeDD : update D1 with the values from D2 (modify D1)NN : gdc

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>.-</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>LL|LN|DJ|DS|NN</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

LL : remove items at indices L1 from L2LN : remove item at index N from
LDJ : remove key from dictDS : remove key from dictNN : lcm

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>./</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>N</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

N : ceiling

.. raw:: html

   </td>

.. raw:: html

   <td>

\ **ceil**\ 

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>.;</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>..A</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

..A : clear the entire stack

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>.<</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>SS|LN|CC|SN|NN</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

SS : greater ofLN : head / pad 0CC : greater ofSN : head / pad ’ ’NN :
greater of

.. raw:: html

   </td>

.. raw:: html

   <td>

\ **head**\ 

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>.=</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>LL|LA|AL</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

LL : element-wise equivalenceLA : element-wise equivalenceAL :
element-wise equivalence

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>.></pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>SS|LN|CC|SN|NN</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

SS : lesser ofLN : tail / pad 0CC : lesser ofSN : tail / pad ’ ’NN :
lesser of

.. raw:: html

   </td>

.. raw:: html

   <td>

\ **tail**\ 

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>.?</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>AAA</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

AAA : if A1 then A2, else A3. If A2/A3 are blocks, execute

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>.@</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>..AN</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

..AN : moves the Nth item on the stack (not including N) to the top

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>.A</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>..A</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

..A : wrap entire stack in a list

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>.B</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>AL</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

AL : append item to the back of a list

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>.C</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>LB|NN</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

LB : sort least to greatest by applying B to LNN : xor

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>.D</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>A</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

A : throw an exception containing A

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>.E</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>L</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

L : length, keep list on stack

.. raw:: html

   </td>

.. raw:: html

   <td>

\ **len**\ 

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>.F</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>L</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

L : flatten nested list

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>.G</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>ASN</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

ASN : write A as a string to file located at S. N = 0, overwrite. N = 1,
append

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>.I</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>LNA|DSA|DJA</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

LNA : getindex with default valueDSA : getindex with default valueDJA :
getindex with default value

.. raw:: html

   </td>

.. raw:: html

   <td>

\ **getindex**\ 

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>.K</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>BB</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

BB : try B1, if error, execute B2. Neither block has access to the
global stack

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>.M</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>A</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

A : get metatable

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>.N</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>LB</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

LB : return the index of the first element of L that satifies E; keep
list on stack

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>.P</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>A</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

A : print to stdout

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>.Q</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>-</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

- : return a random decimal from 0 to 1

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>.R</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>N</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

N : range [0, 1, .., N-1]

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>.T</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>L</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

L : transpose a 2d list

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>.U</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>S</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

S : requests a string using a ui dialog, S is the prompt text

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>.V</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>AL</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

AL : append item to back of list

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>.\</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>N</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

N : floor

.. raw:: html

   </td>

.. raw:: html

   <td>

\ **floor**\ 

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>.^</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>N</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

N : square root

.. raw:: html

   </td>

.. raw:: html

   <td>

\ **sqrt**\ 

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>.|</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>B|N</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

B : get meta information for a blockN : absolute value

.. raw:: html

   </td>

.. raw:: html

   <td>

\ **abs**\ 

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>.~</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>B|J|S|C|D</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

B : get contents of blockJ : deref variable; if not a block, put
contents in blockS : parse contents to a blockC : parse contents to a
blockD : set all variables

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>:!</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>AA</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

AA : assert equal

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>:#</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>D:#B|L:#B</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

D:#B : map over key value pairsL:#B : map

.. raw:: html

   </td>

.. raw:: html

   <td>

\ **each**\ 

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>:$</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>..AN</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

..AN : copies the first N items on the stack (not including N)

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>:%</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>S</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

S : interpolate string

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>:&</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>A</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

A : duplicate reference (same as $ but does not make a copy)

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>:'</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>S|N|C</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

S : convert a string to bytes using UTF-8 encodingN : identity; return
NC : to int

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>:*</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>LLB</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

LLB : outer product of two lists using B

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>:;</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>..AA</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

..AA : clear all but the top of the stack

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>:<</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>SS|CC|NN</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

SS : less then or equal toCC : less then or equal toNN : less then or
equal to

.. raw:: html

   </td>

.. raw:: html

   <td>

\ **leq**\  / \ **rleq**\ 

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>:=</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>AS|AJ|AC</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

AS : assign A to variableAJ : assign A to variableAC : assign A to
variable

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>:></pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>SS|CC|NN</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

SS : greater than or equal toCC : greater than or equal toNN : greater
than or equal to

.. raw:: html

   </td>

.. raw:: html

   <td>

\ **geq**\  / \ **rgeq**\ 

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>:?</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>A</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

A : convert to boolean

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>:@</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>AA</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

AA : isinstance

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>:A</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>..AN</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

..AN : collect N items from stack into list

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>:C</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>J|S</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

J : convert symbol to string nameS : return S

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>:D</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>ASD|AJD</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

ASD : set dict indexAJD : set dict index

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>:E</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>D</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

D : number or items in a dict

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>:G</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre></pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

: Return the variable scope stack as a list of dicts

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>:I</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>DJ|DS</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

DJ : get dict item from keyDS : get dict item from key

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>:K</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>D</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

D : return a list of keys as symbols

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>:M</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>BD|DD</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

BD : duplicate block with the given metadataDD : set D1’s meta to D2
leave D1 on stack

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>:N</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>LA</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

LA : find all instances of A in L

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>:O</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>J</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

J : Aya meta information

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>:P</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>A</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

A : println to stdout

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>:R</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>-</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

- : readline from stdin

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>:S</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>B|S|C</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

B : if block has single var or op convert to symbol list, else return
empty listS : convert to symbolC : convert to symbol

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>:T</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>A</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

A : type of (returns a symbol)

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>:V</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>D</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

D : return a list of values

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>:Z</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>N</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

N : sleep (milliseconds)

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>:`</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>BN:`A</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

BN:`A : wrap next N instructions in a block

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>:|</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>LL</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

LL : remove all elements in L2 from L1

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>:~</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>L</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

L : remove duplicates

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>M!</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>N</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

N : factorial

.. raw:: html

   </td>

.. raw:: html

   <td>

\ **fact**\ 

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>M#</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>A</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

A : hash code of the object

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>M$</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>-</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

- : system time in milliseconds

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>M?</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>B|N|S</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

B : get help data for operatorN : list op descriptions where N=[0:std,
1:dot, 2:colon, 3:misc]S : search all help data

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>MC</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>N</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

N : inverse cosine

.. raw:: html

   </td>

.. raw:: html

   <td>

\ **acos**\ 

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>MI</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>NN</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

NN : create complex number

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>ML</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>N</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

N : base-10 logarithm

.. raw:: html

   </td>

.. raw:: html

   <td>

\ **log**\ 

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>MS</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>N</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

N : inverse sine

.. raw:: html

   </td>

.. raw:: html

   <td>

\ **asin**\ 

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>MT</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>N</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

N : inverse tangent

.. raw:: html

   </td>

.. raw:: html

   <td>

\ **atan**\ 

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>Mc</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>N</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

N : cosine

.. raw:: html

   </td>

.. raw:: html

   <td>

\ **cos**\ 

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>Md</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>N|S</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

N : cast to doubleS : parse double, if invalid, return 0.0

.. raw:: html

   </td>

.. raw:: html

   <td>

\ **float**\ 

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>Me</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>N</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

N : exponential function

.. raw:: html

   </td>

.. raw:: html

   <td>

\ **exp**\ 

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>Mi</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>N</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

N : imag part of complex number

.. raw:: html

   </td>

.. raw:: html

   <td>

\ **imag**\ 

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>Mk</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>CS</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

CS : add special character

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>Ml</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>N</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

N : natural logarithm

.. raw:: html

   </td>

.. raw:: html

   <td>

\ **ln**\ 

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>Mm</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>D</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

D : true if the dict has a metatable, leave D on stack

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>Mp</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>N</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

N : list primes up to N

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>Mr</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>N</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

N : convert to fractional number

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>Ms</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>N</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

N : sine

.. raw:: html

   </td>

.. raw:: html

   <td>

\ **sin**\ 

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>Mt</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>N</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

N : tangent

.. raw:: html

   </td>

.. raw:: html

   <td>

\ **tan**\ 

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   <tr>

.. raw:: html

   <td>

.. raw:: html

   <pre>Mu</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   <pre>NN</pre>

.. raw:: html

   </td>

.. raw:: html

   <td>

NN : y x Mu => atan2(y,x)

.. raw:: html

   </td>

.. raw:: html

   <td>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   </table>
